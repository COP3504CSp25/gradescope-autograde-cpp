#!/usr/bin/env python3
import grade_util as gu
import bootstrap
import os
import stat
import glob
import yaml
import subprocess
import unittest
from typing import List

from gradescope_utils.autograder_utils.decorators import weight
from gradescope_utils.autograder_utils.json_test_runner import JSONTestRunner

#  directory where all tests reside
TEST_DIR = '/autograder/source/tests'


#  class used in generating unittest TestCase's
class Test(type):

    def __new__(mcs, test, bases, attrs):
        attrs[test.__doc__] = test
        return super(Test, mcs).__new__(mcs, test.__doc__, bases, attrs)


def get_test_dirs() -> List[str]:
    '''
    Returns a list of directory paths, as strings, for each test contained in 'tests' directory
    '''
    return [dr[:-1] for dr in glob.glob(TEST_DIR + '/*/')]


def generate_test(dir_name):

    def load_settings():
        path = os.path.join(TEST_DIR, dir_name, 'test.yml')
        with open(path, 'r') as f:
            return yaml.safe_load(f) or {}

    def compile_test():
        compile_path = os.path.join(TEST_DIR, dir_name, 'compile.sh')
        os.chmod(compile_path, os.stat(compile_path).st_mode | stat.S_IEXEC)
        subprocess.check_call(['bash', 'compile.sh'], cwd=os.path.join(TEST_DIR, dir_name))

    def run_test():
        run_path = os.path.join(TEST_DIR, dir_name, 'run.sh')
        if gu.file_exists(run_path):
            os.chmod(run_path, os.stat(run_path).st_mode | stat.S_IEXEC)
            subprocess.check_call(['bash', 'run.sh'], cwd=os.path.join(TEST_DIR, dir_name))
        else:
            subprocess.check_call(['./text.exe'], cwd=os.path.join(TEST_DIR, dir_name))

    settings = load_settings()

    @weight(settings.get('weight', 1))
    def wrapper(self):
        try:
            compile_test()
        except subprocess.CalledProcessError:  # compile script returned non-zero
            raise Exception('Failed to compile test')

        try:
            run_test()
        except subprocess.CalledProcessError:  # test script returned non-zero
            raise Exception(settings.get('message'))

    wrapper.__doc__ = '{}'.format(settings.get('name', os.path.basename(dir_name)))
    return wrapper


def run_tests():
    suite = unittest.TestSuite()

    #  go through all directories in /tests
    for dr in get_test_dirs():
        test_fn = generate_test(dr)
        t = Test(test_fn, (unittest.TestCase,), {})
        suite.addTest(t(test_fn.__doc__))

    with open(gu.Config.RESULTS_FILE, 'w+') as result_stream:
        JSONTestRunner(stdout_visibility='visible', visibility='visible', stream=result_stream).run(suite)


#  Execution begins here
if __name__ == '__main__':
    bootstrap.init()
    run_tests()
